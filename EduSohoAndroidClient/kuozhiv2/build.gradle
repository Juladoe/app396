apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        applicationId "com.edusoho"
        minSdkVersion 16
        targetSdkVersion 21
        versionName "3.4.1"
        versionCode 33
    }

    productFlavors {
        edusoho {
            applicationId "com.edusoho.kuozhi"
        }
    }

    //链接选项 移除lint检查的error
    lintOptions {
        abortOnError false
    }

    //签名
    signingConfigs {
        debugConfig {
            storeFile file("key/edusoho.kuozhi.jks")
            storePassword "10001000"
            keyAlias "cn"
            keyPassword "10001000"
        }
    }

    buildTypes {
        debug {
            zipAlignEnabled true
            minifyEnabled false
            signingConfig signingConfigs.debugConfig
        }

        release {
            zipAlignEnabled true
            minifyEnabled false
            //proguardFiles 'proguard-rules.txt'
            signingConfig signingConfigs.debugConfig
        }
    }
}

dependencies {
    compile project(':edusoho_v3')
    compile project(':homework')
}

/*
android.applicationVariants.all { variant ->

    CustomFilter.pkg = android.productFlavors[0].applicationId;
    println CustomFilter.pkg

    FileFilter fileFilter = new FileFilter() {
        @Override
        boolean accept(File file) {
            if (file.getName().endsWith(".zip")
                    || file.getName().endsWith(".ttf")
                    || file.getName().endsWith(".apk")) {
                return false;
            }
            return true;
        }
    };
    variant.each { output ->
        def type = output.buildType.isDebuggable() ? "debug" : "release";
        output.mergeAssets.getRawInputFolders().each { file ->

            file.listFiles().each { input ->
                copy {
                    from fileTree(dir: input, include: '*.zip')
                    from fileTree(dir: input, include: '*.apk')
                    from fileTree(dir: input, include: '*.ttf')

                    into 'build/' + type + 'RealAssets'
                }
            }

            file.listFiles(fileFilter).each { input ->

                copy {
                    from input
                    filter (CustomFilter)

                    into 'build/' + type + 'RealAssets'
                }
            }
        }

        if (output.buildType.isDebuggable()) {
            android.sourceSets.edusohoDebug.assets.srcDirs = [ "build/"  + type + "RealAssets" ];
        } else {
            android.sourceSets.edusohoRelease.assets.srcDirs = [ "build/"  + type + "RealAssets" ];
        }
    }
}

class CustomFilter extends java.io.FilterReader
{
    //默认加密包名
    public static String pkg = "com.edusoho.kuozhi";

    int mCurrentDesgetIndex = 0;
    char[] mDesgetKey = pkg.getChars();

    public CustomFilter(Reader reader)
    {
        super(reader);
    }

    public int read(char[] buffer, int offset, int count) throws IOException {
        int result = super.read(buffer, offset, count);

        int length = buffer.length
        int keyLength = mDesgetKey.length - 1;
        for (int i = 0; i < length; i++) {
            mCurrentDesgetIndex = mCurrentDesgetIndex > keyLength ? 0 : mCurrentDesgetIndex;

            byte[] temp = new byte[2];
            temp[0] = (byte) ((buffer[i] & 0xFF00) >> 8);
            temp[1] = (byte) (buffer[i] & 0xFF);

            char desgentChar = mDesgetKey[mCurrentDesgetIndex++];

            temp[0] = temp[0] ^ (byte) ((desgentChar & 0xFF00) >> 8);
            temp[1] = temp[1] ^  (byte) (desgentChar & 0xFF);
            buffer[i] = (char) (((temp[0] & 0xFF) << 8) | (temp[1] & 0xFF)); ;
        }

        return result;
    }
}
*/

